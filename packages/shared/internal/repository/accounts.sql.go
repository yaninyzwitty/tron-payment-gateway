// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: accounts.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (client_id, name) VALUES ($1, $2)
`

type CreateAccountParams struct {
	ClientID uuid.UUID `db:"client_id" json:"client_id"`
	Name     string    `db:"name" json:"name"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.Exec(ctx, createAccount, arg.ClientID, arg.Name)
	return err
}

const getAccountByIDAndClientID = `-- name: GetAccountByIDAndClientID :one
SELECT id, client_id, name, created_at
FROM accounts
WHERE id = $1 AND client_id = $2
LIMIT 1
`

type GetAccountByIDAndClientIDParams struct {
	ID       uuid.UUID `db:"id" json:"id"`
	ClientID uuid.UUID `db:"client_id" json:"client_id"`
}

type GetAccountByIDAndClientIDRow struct {
	ID        uuid.UUID          `db:"id" json:"id"`
	ClientID  uuid.UUID          `db:"client_id" json:"client_id"`
	Name      string             `db:"name" json:"name"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

func (q *Queries) GetAccountByIDAndClientID(ctx context.Context, arg GetAccountByIDAndClientIDParams) (GetAccountByIDAndClientIDRow, error) {
	row := q.db.QueryRow(ctx, getAccountByIDAndClientID, arg.ID, arg.ClientID)
	var i GetAccountByIDAndClientIDRow
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountsByClientID = `-- name: GetAccountsByClientID :many
SELECT id, client_id, name, created_at
FROM accounts
WHERE client_id = $1
`

type GetAccountsByClientIDRow struct {
	ID        uuid.UUID          `db:"id" json:"id"`
	ClientID  uuid.UUID          `db:"client_id" json:"client_id"`
	Name      string             `db:"name" json:"name"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

func (q *Queries) GetAccountsByClientID(ctx context.Context, clientID uuid.UUID) ([]GetAccountsByClientIDRow, error) {
	rows, err := q.db.Query(ctx, getAccountsByClientID, clientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccountsByClientIDRow
	for rows.Next() {
		var i GetAccountsByClientIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
