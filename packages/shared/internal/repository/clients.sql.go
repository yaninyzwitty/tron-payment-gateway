// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clients.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createClient = `-- name: CreateClient :exec
INSERT INTO clients (name, api_key) VALUES ($1, $2)
`

type CreateClientParams struct {
	Name   string `json:"name"`
	ApiKey string `json:"api_key"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) error {
	_, err := q.db.ExecContext(ctx, createClient, arg.Name, arg.ApiKey)
	return err
}

const getClientByAPIKey = `-- name: GetClientByAPIKey :one
SELECT id, name, api_key, is_active, created_at
FROM clients
WHERE api_key = $1 AND is_active = TRUE
LIMIT 1
`

func (q *Queries) GetClientByAPIKey(ctx context.Context, apiKey string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByAPIKey, apiKey)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ApiKey,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getClientByID = `-- name: GetClientByID :one
SELECT id, name, api_key, is_active, created_at
FROM clients
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetClientByID(ctx context.Context, id uuid.UUID) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByID, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ApiKey,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}
